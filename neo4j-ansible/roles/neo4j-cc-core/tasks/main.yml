# http://docs.ansible.com/ansible/latest/group_module.html
- name: add group "neo4j"
  group:
    gid: 7474
    name: "{{ neo4j_os_group }}"

# http://docs.ansible.com/ansible/latest/user_module.html
- name: add user "neo4j"
  user:
    uid: 7474
    name: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    home: "{{ neo4j_os_home }}"
    createhome: no
    shell: /bin/bash

# http://docs.ansible.com/ansible/latest/stat_module.html
- name: local check "neo4j" archive exists
  local_action: stat path="/etc/ansible/roles/neo4j-standalone/files/neo4j-enterprise-{{ neo4j_version }}-unix.tar.gz"
  register: neo4jarchive
  become: false

# http://docs.ansible.com/ansible/latest/unarchive_module.html
- name: extract local "neo4j" archive
  unarchive:
    src: "neo4j-enterprise-{{ neo4j_version }}-unix.tar.gz"
    dest: /var/tmp
    creates: "{{ neo4j_directory_bin }}"
  when: neo4jarchive.stat.exists == True

# http://docs.ansible.com/ansible/latest/unarchive_module.html
- name: extract remote "neo4j" archive
  unarchive:
    remote_src: yes
    src: "https://neo4j.com/artifact.php?name=neo4j-enterprise-{{ neo4j_version }}-unix.tar.gz"
    dest: /var/tmp
    creates: "{{ neo4j_directory_bin }}"
  when: neo4jarchive.stat.exists == False

# http://docs.ansible.com/ansible/latest/file_module.html
- name: create "data" directory
  file:
    path: "{{ neo4j_directory_data }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "data/databases" directory
  file:
    path: "{{ neo4j_directory_data }}/databases"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "plugins" directory
  file:
    path: "{{ neo4j_directory_plugins }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "certificates" directory
  file:
    path: "{{ neo4j_directory_certificates }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "logs" directory
  file:
    path: "{{ neo4j_directory_logs }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "lib" directory
  file:
    path: "{{ neo4j_directory_lib }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "bin" directory
  file:
    path: "{{ neo4j_directory_bin }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "run" directory
  file:
    path: "{{ neo4j_directory_run }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "metrics" directory
  file:
    path: "{{ neo4j_directory_metrics }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "import" directory
  file:
    path: "{{ neo4j_directory_import }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750
- name: create "configuration" directory
  file:
    path: "{{ neo4j_directory_configuration }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    mode: 0750

# http://docs.ansible.com/ansible/latest/shell_module.html
- name: create "bin"
  shell: mv /var/tmp/neo4j-enterprise-{{ neo4j_version }}/bin/* {{ neo4j_directory_bin }}
  args:
    creates: "{{ neo4j_directory_bin }}/neo4j"

# http://docs.ansible.com/ansible/latest/shell_module.html
- name: create "lib"
  shell: mv /var/tmp/neo4j-enterprise-{{ neo4j_version }}/lib/* {{ neo4j_directory_lib }}
  args:
    creates: "{{ neo4j_directory_lib }}/neo4j-server-{{ neo4j_version }}.jar"

# http://docs.ansible.com/ansible/latest/file_module.html
- name: permissions "bin" directory
  file:
    path: "{{ neo4j_directory_bin }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    recurse: yes
- name: permissions "lib" directory
  file:
    path: "{{ neo4j_directory_lib }}"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    state: directory
    recurse: yes
- name: remove "neo4j" archive
  file:
    path: /var/tmp/neo4j-enterprise-{{ neo4j_version }}
    state: absent

# http://docs.ansible.com/ansible/latest/stat_module.html
- name: local check "apoc" archive exists
  local_action: stat path="/etc/ansible/roles/neo4j-standalone/files/apoc-{{ neo4j_apoc_version }}-all.jar"
  register: apocjar
  become: false

# http://docs.ansible.com/ansible/latest/copy_module.html
- name: copy "apoc" jar
  copy:
    src: "apoc-{{ neo4j_apoc_version }}-all.jar"
    dest: "{{ neo4j_directory_plugins }}/apoc-{{ neo4j_apoc_version }}-all.jar"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    mode: 0640
  when: apocjar.stat.exists == True

# http://docs.ansible.com/ansible/latest/get_url_module.html
- name: download "apoc" jar
  get_url:
    url: "https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/{{ neo4j_apoc_version }}/apoc-{{ neo4j_apoc_version }}-all.jar"
    dest: "{{ neo4j_directory_plugins }}/apoc-{{ neo4j_apoc_version }}-all.jar"
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"
    mode: 0640
  when: apocjar.stat.exists == False

# http://docs.ansible.com/ansible/latest/template_module.html
- name: create "jmx.access"
  template:
    src: "{{ neo4j_version }}/jmx.access"
    dest: "{{ neo4j_directory_configuration }}"
    mode: 0640
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"

# http://docs.ansible.com/ansible/latest/template_module.html
- name: create "jmx.password"
  template:
    src: "{{ neo4j_version }}/jmx.password"
    dest: "{{ neo4j_directory_configuration }}"
    mode: 0640
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"

# http://docs.ansible.com/ansible/latest/template_module.html
- name: create "neo4j.conf"
  template:
    src: "{{ neo4j_version }}/neo4j.conf.j2"
    dest: "{{ neo4j_directory_configuration }}/neo4j.conf"
    mode: 0640
    owner: "{{ neo4j_os_user }}"
    group: "{{ neo4j_os_group }}"

# http://docs.ansible.com/ansible/latest/template_module.html
- name: create "/usr/bin/neo4j"
  template:
    src: "{{ neo4j_version }}/neo4j_script_wrapper.j2"
    dest: /usr/bin/neo4j
    mode: 0555
    owner: root
    group: root
- name: create "/usr/bin/neo4j-admin"
  template:
    src: "{{ neo4j_version }}/neo4j_script_wrapper.j2"
    dest: /usr/bin/neo4j-admin
    mode: 0555
    owner: root
    group: root
- name: create "/usr/bin/neo4j-backup"
  template:
    src: "{{ neo4j_version }}/neo4j_script_wrapper.j2"
    dest: /usr/bin/neo4j-backup
    mode: 0555
    owner: root
    group: root

# http://docs.ansible.com/ansible/latest/shell_module.html
- name: set initial database password
  shell: neo4j-admin set-initial-password {{ neo4j_admin_password }}
  args: 
    creates: "{{ neo4j_directory_data }}/dbms/auth"
  become_user: "{{ neo4j_os_user }}" 

# http://docs.ansible.com/ansible/latest/stat_module.html
- name: check "/etc/init.d" exists
  stat:
    path: /etc/init.d
  register: initd

# http://docs.ansible.com/ansible/latest/template_module.html
- name: create "/etc/init.d/neo4j"
  template:
    src: "{{ neo4j_version }}/neo4j_init.j2"
    dest: /etc/init.d/neo4j
    mode: 0555
    owner: root
    group: root
  when: (initd.stat.exists) and (ansible_service_mgr != "systemd")

# http://docs.ansible.com/ansible/latest/shell_module.html
- name: update-rc.d "/etc/init.d/neo4j"
  shell: |
    update-rc.d neo4j --remove
    update-rc.d neo4j defaults
  when: (initd.stat.exists) and (ansible_service_mgr != "systemd") and (ansible_distribution_file_variety == "Debian")

# http://docs.ansible.com/ansible/latest/shell_module.html
- name: chkconfig "/etc/init.d/neo4j"
  shell: |
    chkconfig neo4j off
    chkconfig --del neo4j
    chkconfig --add neo4j
    chkconfig neo4j on
    exit 0
  when: (initd.stat.exists) and (ansible_service_mgr != "systemd") and (ansible_distribution_file_variety == "RedHat")

# http://docs.ansible.com/ansible/latest/template_module.html
- name: create "/etc/systemd/system/neo4j.service"
  template:
    src: "{{ neo4j_version }}/neo4j_systemd.j2"
    dest: /etc/systemd/system/neo4j.service
    mode: 0555
    owner: root
    group: root
  when: ansible_service_mgr == "systemd"

# http://docs.ansible.com/ansible/latest/shell_module.html
- name: systemctl "/etc/systemd/system/neo4j.service"
  shell: |
    systemctl disable neo4j
    systemctl daemon-reload
    systemctl enable neo4j
    systemctl daemon-reload
    exit 0
  when: ansible_service_mgr == "systemd"

# http://docs.ansible.com/ansible/latest/service_module.html
- name: service "neo4j"
  service: 
    name: neo4j
    state: started
